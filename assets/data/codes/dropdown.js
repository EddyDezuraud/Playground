const items = [
    {
        lang: 'vuejs',
        tabs: [
            {
                label: 'wrapper.vue',
                code: '<template>\r\n    <div>\r\n        <Dropdown :list=\"dropDownList\" @click=\"onClickItem\" \/>\r\n        <Dropdown :list=\"dropDownList\" @click=\"onClickItem\" dark \/>\r\n    <\/div>\r\n<\/template>\r\n\r\n\r\n<script>\r\nexport default {\r\n    data() {\r\n        return {\r\n            dropDownList: [\r\n                {\r\n                    label: \'Unfollow\',\r\n                    id: \'unfollow\',\r\n                    icon: \'user-x\',\r\n                    color: \'#79798a\'\r\n                },\r\n                {\r\n                    topSeparator: true,\r\n                    label: \'Comment this post\',\r\n                    id: \'comment\',\r\n                    icon: \'message-2\'\r\n                },\r\n                {\r\n                    label: \'Embed\',\r\n                    id: \'embed\',\r\n                    icon: \'code\'\r\n                },\r\n                {\r\n                    label: \'Add to Lists\',\r\n                    id: \'addFromList\',\r\n                    icon: \'circle-plus\'\r\n                },\r\n                {\r\n                    topSeparator: true,\r\n                    label: \'Mute @meta_user\',\r\n                    id: \'mute\',\r\n                    icon: \'volume-off\'\r\n                },\r\n                {\r\n                    label: \'Block @meta_user\',\r\n                    id: \'block\',\r\n                    icon: \'lock-access-off\'\r\n                },\r\n                {\r\n                    topSeparator: true,\r\n                    label: \'Report\',\r\n                    id: \'report\',\r\n                    icon: \'hand-stop\',\r\n                    color: \'#ff333a\'\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n<\/script>',
            },
            {
                label: 'dropdown.vue',
                default: true,
                code: '<template>\r\n  <div class=\"wrapper\" :class=\"{ dark: dark }\">\r\n    <div class=\"inner\" @mouseleave=\"onMouseLeave\">\r\n      <ul class=\"list\">\r\n        <li v-for=\"(item, index) in list\" :key=\"index\" :style=\"itemColor(item)\"\r\n            class=\"item\" :class=\"{ \'topSeparator\': item.topSeparator }\"\r\n            @click=\"emitClick(item.id)\" @mouseenter=\"onMouseEnter($event, item)\">\r\n          <component :is=\"item.icon + \'-icon\'\" class=\"icon\" \/>\r\n          <span>{{ item.label }}<\/span>\r\n        <\/li>\r\n      <\/ul>\r\n      <div class=\"highlighter\" :style=\"highlighter\"><\/div>\r\n    <\/div>\r\n  <\/div>\r\n<\/template>\r\n\r\n<script>\r\nimport { defineComponent, ref } from \'vue\';\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    list: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    dark: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  setup(props, { emit }) {\r\n    const highlighter = ref({\r\n      height: 0,\r\n      transform: \'translateY(0)\',\r\n      color: \'currentColor\',\r\n      opacity: 0\r\n    });\r\n\r\n    function itemColor(item) {\r\n      if (item.color) return { color: item.color }\r\n      return {};\r\n    }\r\n\r\n    function onMouseEnter($event, item) {\r\n      if (item.color) {\r\n        highlighter.value.color = item.color;\r\n      } else {\r\n        highlighter.value.color = \'currentColor\';\r\n      }\r\n      highlighter.value.transform = `translateY(${$event.currentTarget.offsetTop}px)`;\r\n      highlighter.value.height = $event.currentTarget.offsetHeight + \'px\';\r\n      highlighter.value.opacity = 0.1;\r\n    }\r\n\r\n    function onMouseLeave() {\r\n      highlighter.value.opacity = 0;\r\n    }\r\n\r\n    function emitClick(id) {\r\n      emit(\'click\', id);\r\n    }\r\n\r\n    return {\r\n      highlighter,\r\n      itemColor,\r\n      onMouseEnter,\r\n      onMouseLeave,\r\n      emitClick\r\n    };\r\n  }\r\n});\r\n<\/script>\r\n\r\n\r\n<style lang=\"scss\">\r\n.wrapper {\r\n    background: white;\r\n    color: black;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    width: 280px;\r\n}\r\n\r\n.inner {\r\n    position: relative;\r\n}\r\n\r\n.item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 5px 8px;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    position: relative;\r\n    z-index: 2;\r\n    cursor: pointer;\r\n    transform: translateZ(0);\r\n    user-select: none;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n}\r\n\r\n.topSeparator {\r\n    margin-top: 5px;\r\n\r\n    &::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #EBEEF1;\r\n    }\r\n}\r\n\r\n.icon {\r\n    font-size: 18px;\r\n}\r\n\r\n.highlighter {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    background: currentColor;\r\n    opacity: 0.1;\r\n    border-radius: 6px;\r\n    z-index: 0;\r\n    transition: transform 0.15s, opacity 0.15s;\r\n}\r\n\r\n.list {\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n}\r\n\r\n\r\n.dark {\r\n    background: rgb(19, 19, 21);\r\n    color: white;\r\n    box-shadow: rgb(0 0 0 \/ 12%) 0px 12px 12px, 0 0 0 1px rgba(255, 255, 255, 0.12);\r\n\r\n    .item {\r\n        font-weight: 500;\r\n    }\r\n\r\n    .topSeparator ::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #2c2f31;\r\n    }\r\n}\r\n<\/style>'
            }
        ]
    },
    {
        lang: 'reactjs',
        tabs: [
            {
                label : 'dropdown.js',
                default: true,
                code: "import React, { useState } from \'react\';\r\n\r\nconst ListItem = ({ item, index, itemColor, onMouseEnter, onClick }) => {\r\n  return (\r\n    <li\r\n      key={index}\r\n      style={itemColor(item)}\r\n      className={`item ${item.topSeparator ? \'topSeparator\' : \'\'}`}\r\n      onClick={() => onClick(item.id)}\r\n      onMouseEnter={onMouseEnter}\r\n    >\r\n      <span className=\"icon\">{item.icon}<\/span>\r\n      <span>{item.label}<\/span>\r\n    <\/li>\r\n  );\r\n};\r\n\r\nconst List = ({ list, itemColor, onMouseEnter, onClick }) => {\r\n  return (\r\n    <ul className=\"list\">\r\n      {list.map((item, index) => (\r\n        <ListItem\r\n          key={index}\r\n          item={item}\r\n          index={index}\r\n          itemColor={itemColor}\r\n          onMouseEnter={onMouseEnter}\r\n          onClick={onClick}\r\n        \/>\r\n      ))}\r\n    <\/ul>\r\n  );\r\n};\r\n\r\nconst Highlighter = ({ style }) => {\r\n  return <div className=\"highlighter\" style={style} \/>;\r\n};\r\n\r\nconst ListWrapper = ({ dark, list, onClick }) => {\r\n  const [highlighter, setHighlighter] = useState({\r\n    height: 0,\r\n    transform: \'translateY(0)\',\r\n    color: \'currentColor\',\r\n    opacity: 0,\r\n  });\r\n\r\n  const itemColor = (item) => {\r\n    if (item.color) return { color: item.color };\r\n    return {};\r\n  };\r\n\r\n  const onMouseEnter = (event, item) => {\r\n    const color = item.color || \'currentColor\';\r\n    setHighlighter({\r\n      color,\r\n      transform: `translateY(${event.currentTarget.offsetTop}px)`,\r\n      height: `${event.currentTarget.offsetHeight}px`,\r\n      opacity: 0.1,\r\n    });\r\n  };\r\n\r\n  const onMouseLeave = () => {\r\n    setHighlighter({\r\n      opacity: 0,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className={`wrapper ${dark ? \'dark\' : \'\'}`}>\r\n      <div className=\"inner\" onMouseLeave={onMouseLeave}>\r\n        <List\r\n          list={list}\r\n          itemColor={itemColor}\r\n          onMouseEnter={onMouseEnter}\r\n          onClick={onClick}\r\n        \/>\r\n        <Highlighter style={highlighter} \/>\r\n      <\/div>\r\n    <\/div>\r\n  );\r\n};\r\n\r\nexport default ListWrapper;\r\n"
            },
            {
                label: 'dropdown.css',
                code: ".wrapper {\r\n    background: white;\r\n    color: black;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    width: 280px;\r\n}\r\n\r\n.inner {\r\n    position: relative;\r\n}\r\n\r\n.item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 5px 8px;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    position: relative;\r\n    z-index: 2;\r\n    cursor: pointer;\r\n    transform: translateZ(0);\r\n    user-select: none;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n}\r\n\r\n.topSeparator {\r\n    margin-top: 5px;\r\n\r\n    &::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #EBEEF1;\r\n    }\r\n}\r\n\r\n.icon {\r\n    font-size: 18px;\r\n}\r\n\r\n.highlighter {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    background: currentColor;\r\n    opacity: 0.1;\r\n    border-radius: 6px;\r\n    z-index: 0;\r\n    transition: transform 0.15s, opacity 0.15s;\r\n}\r\n\r\n.list {\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n}\r\n\r\n\r\n.dark {\r\n    background: rgb(19, 19, 21);\r\n    color: white;\r\n    box-shadow: rgb(0 0 0 \/ 12%) 0px 12px 12px, 0 0 0 1px rgba(255, 255, 255, 0.12);\r\n\r\n    .item {\r\n        font-weight: 500;\r\n    }\r\n\r\n    .topSeparator ::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #2c2f31;\r\n    }\r\n}"
            }
        ]
    },
    {
        lang: 'angular',
        tabs: [
            {
                label : 'dropdown.js',
                default: true,
                code: "import { Component, Input } from \'@angular\/core\';\r\n\r\n@Component({\r\n  selector: \'dropdown\',\r\n  template: `\r\n    <div [ngClass]=\"[\'wrapper\', { \'dark\': dark }]\">\r\n        <div class=\"inner\" (mouseleave)=\"onMouseLeave()\">\r\n            <ul class=\"list\">\r\n                <li *ngFor=\"let item of list; let i = index\" [ngStyle]=\"itemColor(item)\"\r\n                    [ngClass]=\"[\'item\', { \'topSeparator\': item.topSeparator }]\"\r\n                    (click)=\"onClick(item.id)\" (mouseenter)=\"onMouseEnter($event, item)\">\r\n                    <component [is]=\"item.icon + \'-icon\'\" class=\"icon\" \/>\r\n                    <span>{{ item.label }}<\/span>\r\n                <\/li>\r\n            <\/ul>\r\n            <div [ngStyle]=\"highlighter\" class=\"highlighter\"><\/div>\r\n        <\/div>\r\n    <\/div>\r\n  `,\r\n})\r\nexport class DropdownComponent {\r\n  @Input() list = [];\r\n  @Input() dark = false;\r\n\r\n  highlighter = {\r\n    height: 0,\r\n    transform: \'translateY(0)\',\r\n    color: \'currentColor\',\r\n    opacity: 0,\r\n  };\r\n\r\n  itemColor(item) {\r\n    return item.color ? { color: item.color } : {};\r\n  }\r\n\r\n  onMouseEnter(event, item) {\r\n    this.highlighter.color = item.color ? item.color : \'currentColor\';\r\n    this.highlighter.transform = `translateY(${event.currentTarget.offsetTop}px)`;\r\n    this.highlighter.height = event.currentTarget.offsetHeight + \'px\';\r\n    this.highlighter.opacity = 0.1;\r\n  }\r\n\r\n  onMouseLeave() {\r\n    this.highlighter.opacity = 0;\r\n  }\r\n\r\n  onClick(id) {\r\n    this.click.emit(id);\r\n  }\r\n}"
            },
            {
                label: 'dropdown.css',
                code: ".wrapper {\r\n    background: white;\r\n    color: black;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    width: 280px;\r\n}\r\n\r\n.inner {\r\n    position: relative;\r\n}\r\n\r\n.item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 5px 8px;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    position: relative;\r\n    z-index: 2;\r\n    cursor: pointer;\r\n    transform: translateZ(0);\r\n    user-select: none;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n}\r\n\r\n.topSeparator {\r\n    margin-top: 5px;\r\n\r\n    &::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #EBEEF1;\r\n    }\r\n}\r\n\r\n.icon {\r\n    font-size: 18px;\r\n}\r\n\r\n.highlighter {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    background: currentColor;\r\n    opacity: 0.1;\r\n    border-radius: 6px;\r\n    z-index: 0;\r\n    transition: transform 0.15s, opacity 0.15s;\r\n}\r\n\r\n.list {\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n}\r\n\r\n\r\n.dark {\r\n    background: rgb(19, 19, 21);\r\n    color: white;\r\n    box-shadow: rgb(0 0 0 \/ 12%) 0px 12px 12px, 0 0 0 1px rgba(255, 255, 255, 0.12);\r\n\r\n    .item {\r\n        font-weight: 500;\r\n    }\r\n\r\n    .topSeparator ::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #2c2f31;\r\n    }\r\n}"
            }
        ]
    },
    {
        lang: 'svelte',
        tabs: [
            {
                label : 'dropdown.svelte',
                default: true,
                code: "<script>\r\n  export let list = [];\r\n  export let dark = false;\r\n\r\n  let highlighter = {\r\n    height: 0,\r\n    transform: \'translateY(0)\',\r\n    color: \'currentColor\',\r\n    opacity: 0\r\n  };\r\n\r\n  function itemColor(item) {\r\n    return item.color ? { color: item.color } : {};\r\n  }\r\n\r\n  function onMouseEnter(event, item) {\r\n    highlighter.color = item.color || \'currentColor\';\r\n    highlighter.transform = `translateY(${event.currentTarget.offsetTop}px)`;\r\n    highlighter.height = `${event.currentTarget.offsetHeight}px`;\r\n    highlighter.opacity = 0.1;\r\n  }\r\n\r\n  function onMouseLeave() {\r\n    highlighter.opacity = 0;\r\n  }\r\n<\/script>\r\n\r\n<div class=\"wrapper {dark ? \'dark\' : \'\'}\">\r\n  <div on:mouseleave=\"onMouseLeave\">\r\n    <ul class=\"list\">\r\n      {#each list as item (index)}\r\n        <li\r\n          class=\"{item.topSeparator ? \'topSeparator\' : \'\'} item\"\r\n          style=\"{itemColor(item)}\"\r\n          on:click=\"{() => {$emit(\'click\', item.id)}}\"\r\n          on:mouseenter=\"{e => onMouseEnter(e, item)}\"\r\n        >\r\n          <component is={item.icon + \'-icon\'} class=\"icon\" \/>\r\n          <span>{item.label}<\/span>\r\n        <\/li>\r\n      {\/each}\r\n    <\/ul>\r\n    <div class=\"highlighter\" style=\"{highlighter}\"><\/div>\r\n  <\/div>\r\n<\/div>\r\n\r\n<style>\r\n.wrapper {\r\n    background: white;\r\n    color: black;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    width: 280px;\r\n}\r\n\r\n.inner {\r\n    position: relative;\r\n}\r\n\r\n.item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 5px 8px;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    position: relative;\r\n    z-index: 2;\r\n    cursor: pointer;\r\n    transform: translateZ(0);\r\n    user-select: none;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n}\r\n\r\n.topSeparator {\r\n    margin-top: 5px;\r\n\r\n    &::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #EBEEF1;\r\n    }\r\n}\r\n\r\n.icon {\r\n    font-size: 18px;\r\n}\r\n\r\n.highlighter {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    background: currentColor;\r\n    opacity: 0.1;\r\n    border-radius: 6px;\r\n    z-index: 0;\r\n    transition: transform 0.15s, opacity 0.15s;\r\n}\r\n\r\n.list {\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n}\r\n\r\n\r\n.dark {\r\n    background: rgb(19, 19, 21);\r\n    color: white;\r\n    box-shadow: rgb(0 0 0 \/ 12%) 0px 12px 12px, 0 0 0 1px rgba(255, 255, 255, 0.12);\r\n\r\n    .item {\r\n        font-weight: 500;\r\n    }\r\n\r\n    .topSeparator ::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #2c2f31;\r\n    }\r\n}\r\n<\/style>\r\n"
            },
        ]
    },
    {
        lang: 'vanilla',
        tabs: [
            {
                label : 'dropdown.html',
                default: true,
                code: "<div class=\"wrapper\">\r\n    <div class=\"inner\">\r\n        <ul class=\"list\">\r\n            <li class=\"item\" v-for=\"(item, index) in list\" key=\"index\">\r\n                <span class=\"icon\"><\/span>\r\n                <span>{{ item.label }}<\/span>\r\n            <\/li>\r\n        <\/ul>\r\n        <div class=\"highlighter\"><\/div>\r\n    <\/div>\r\n<\/div>"
            },
            {
                label: 'dropdown.css',
                code: ".wrapper {\r\n    background: white;\r\n    color: black;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    width: 280px;\r\n}\r\n\r\n.inner {\r\n    position: relative;\r\n}\r\n\r\n.item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 5px 8px;\r\n    font-weight: 600;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    position: relative;\r\n    z-index: 2;\r\n    cursor: pointer;\r\n    transform: translateZ(0);\r\n    user-select: none;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n}\r\n\r\n.topSeparator {\r\n    margin-top: 5px;\r\n\r\n    &::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #EBEEF1;\r\n    }\r\n}\r\n\r\n.icon {\r\n    font-size: 18px;\r\n}\r\n\r\n.highlighter {\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    background: currentColor;\r\n    opacity: 0.1;\r\n    border-radius: 6px;\r\n    z-index: 0;\r\n    transition: transform 0.15s, opacity 0.15s;\r\n}\r\n\r\n.list {\r\n    margin: 0;\r\n    padding: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n}\r\n\r\n\r\n.dark {\r\n    background: rgb(19, 19, 21);\r\n    color: white;\r\n    box-shadow: rgb(0 0 0 \/ 12%) 0px 12px 12px, 0 0 0 1px rgba(255, 255, 255, 0.12);\r\n\r\n    .item {\r\n        font-weight: 500;\r\n    }\r\n\r\n    .topSeparator ::before {\r\n        position: absolute;\r\n        content: \'\';\r\n        top: -3px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 1px;\r\n        background: #2c2f31;\r\n    }\r\n}"
            },
            {
                label: 'dropdown.js',
                code: "const wrapper = document.querySelector(\'.wrapper\');\r\nconst inner = document.querySelector(\'.inner\');\r\nconst list = document.querySelector(\'.list\');\r\nconst items = document.querySelectorAll(\'.item\');\r\nconst highlighter = document.querySelector(\'.highlighter\');\r\n\r\nconst listItems = [\r\n    { id: 1, label: \'Item 1\', color: \'red\' },\r\n    { id: 2, label: \'Item 2\', color: \'green\' },\r\n    { id: 3, label: \'Item 3\', color: \'blue\' }\r\n];\r\n\r\nconst dark = false;\r\nif (dark) {\r\n    wrapper.classList.add(\'dark\');\r\n}\r\n\r\nlistItems.forEach((item, index) => {\r\n    const listItem = items[index];\r\n    listItem.style.color = item.color;\r\n    listItem.addEventListener(\'mouseenter\', (event) => {\r\n        highlighter.style.backgroundColor = item.color;\r\n        highlighter.style.transform = `translateY(${event.currentTarget.offsetTop}px)`;\r\n        highlighter.style.height = `${event.currentTarget.offsetHeight}px`;\r\n        highlighter.style.opacity = 0.1;\r\n    });\r\n});\r\n\r\ninner.addEventListener(\'mouseleave\', () => {\r\n    highlighter.style.opacity = 0;\r\n});\r\n"
            }
        ]
    },
]

export default items;